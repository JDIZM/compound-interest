{"version":3,"file":"compoundInterest.js","sourceRoot":"","sources":["../../calc/compoundInterest.ts"],"names":[],"mappings":";;;AAAO,MAAM,gBAAgB,GAAG,CAAC,SAAiB,EAAE,IAAY,EAAE,IAAY,EAAE,gBAAwB,EAAU,EAAE;IAClH,OAAO,CAAC,GAAG,CAAC,iCAAiC,CAAC,CAAC;IAC/C,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,SAAS,CAAC,CAAC;IACtC,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;IAC5B,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;IAC5B,OAAO,CAAC,GAAG,CAAC,oBAAoB,EAAE,gBAAgB,CAAC,CAAC;IAEpD,IAAI,IAAI,IAAI,CAAC,EAAE;QACb,IAAI,GAAG,IAAI,GAAG,GAAG,CAAC;KACnB;IACD,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;IAE5B,MAAM,aAAa,GAAG,IAAI,GAAG,gBAAgB,CAAC;IAC9C,OAAO,CAAC,GAAG,CAAC,iBAAiB,EAAE,aAAa,CAAC,CAAC;IAC9C,MAAM,aAAa,GAAG,IAAI,GAAG,gBAAgB,CAAC;IAC9C,OAAO,CAAC,GAAG,CAAC,iBAAiB,EAAE,aAAa,CAAC,CAAC;IAE9C,MAAM,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,aAAa,EAAE,IAAI,GAAG,gBAAgB,CAAC,CAAC;IACxE,OAAO,CAAC,GAAG,CAAC,OAAO,EAAE,UAAU,CAAC,CAAC;IAEjC,OAAO,SAAS,GAAG,UAAU,CAAC;AAChC,CAAC,CAAC;AArBW,QAAA,gBAAgB,oBAqB3B;AAEK,MAAM,0BAA0B,GAAG,CACxC,SAAiB,EACjB,IAAY,EACZ,IAAY,EACZ,gBAAwB,EACxB,cAAsB,EACtB,EAAE;IACF,MAAM,OAAO,GAAG,IAAA,wBAAgB,EAAC,SAAS,EAAE,IAAI,EAAE,IAAI,EAAE,gBAAgB,CAAC,CAAC;IAC1E,MAAM,eAAe,GAAG,SAAS,GAAG,cAAc,GAAG,IAAI,CAAC;IAC1D,MAAM,aAAa,GAAG,IAAI,GAAG,gBAAgB,CAAC;IAC9C,OAAO;QACL,SAAS;QACT,OAAO;QACP,aAAa;QACb,eAAe;QACf,aAAa,EAAE,OAAO,GAAG,eAAe;KACzC,CAAC;AACJ,CAAC,CAAC;AAjBW,QAAA,0BAA0B,8BAiBrC","sourcesContent":["export const compoundInterest = (principal: number, rate: number, time: number, paymentFrequency: number): number => {\n  console.log(\"calculating compound interest..\");\n  console.log(\"principal: \", principal);\n  console.log(\"rate: \", rate);\n  console.log(\"time: \", time);\n  console.log(\"paymentFrequency: \", paymentFrequency);\n\n  if (rate >= 1) {\n    rate = rate / 100;\n  }\n  console.log(\"rate: \", rate);\n\n  const totalPayments = time * paymentFrequency;\n  console.log(\"totalPayments: \", totalPayments);\n  const ratePerPeriod = rate / paymentFrequency;\n  console.log(\"ratePerPeriod: \", ratePerPeriod);\n\n  const multiplier = Math.pow(1 + ratePerPeriod, time * paymentFrequency);\n  console.log(\"pow: \", multiplier);\n\n  return principal * multiplier;\n};\n\nexport const calcInvestmentWithInterest = (\n  principal: number,\n  rate: number,\n  time: number,\n  paymentFrequency: number,\n  amountPerAnnum: number\n) => {\n  const balance = compoundInterest(principal, rate, time, paymentFrequency);\n  const totalInvestment = principal + amountPerAnnum * time;\n  const totalPayments = time * paymentFrequency;\n  return {\n    principal,\n    balance,\n    totalPayments,\n    totalInvestment,\n    totalInterest: balance - totalInvestment\n  };\n};\n"]}