{"version":3,"file":"compoundInterest.js","sourceRoot":"","sources":["../../calc/compoundInterest.ts"],"names":[],"mappings":"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","sourcesContent":["export const compoundInterestOverYears = (principal: number, rate: number, years: number): number => {\n  if (rate >= 1) {\n    rate = rate / 100;\n  }\n\n  const multiplier = Math.pow(1 + rate, years);\n\n  return principal * multiplier;\n};\n\nexport const calcInvestmentWithInterest = (\n  principal: number,\n  rate: number,\n  years: number,\n  paymentsPerAnnum: number,\n  amountPerAnnum: number\n) => {\n  const finalBalance = compoundInterestOverYears(principal, rate, years);\n  const totalInvestment = principal + amountPerAnnum * years;\n  const totalPayments = years * paymentsPerAnnum;\n  return {\n    principal,\n    finalBalance,\n    totalPayments,\n    totalInvestment,\n    totalInterest: finalBalance - totalInvestment\n  };\n};\n\nexport type InvestmentType = \"lumpSum\" | \"contribution\" | \"debtRepayment\" | \"mortgage\";\n\nexport type MortgageOptions = {\n  deposit: number;\n  monthlyRepayment: number;\n  interestRate: number;\n  years: number;\n  debtRepayment?: boolean;\n};\n\nexport type InvestmentOptions = {\n  principal: number;\n};\n\nexport interface InterestOptions {\n  principal: number;\n  rate: number;\n  years: number;\n  paymentsPerAnnum?: number;\n  amountPerAnnum?: number;\n  accrualOfPaymentsPerAnnum?: boolean;\n  currentPositionInYears?: number;\n  debtRepayment?: boolean;\n  mortgage?: MortgageOptions;\n}\n\nexport const calcTotalPayments = (years: number, paymentsPerAnnum: number, type: InvestmentType) => {\n  // TODO set single payment for a no contributions option\n  switch (type) {\n    case \"lumpSum\":\n      return 1;\n    case \"contribution\":\n    case \"debtRepayment\":\n    default:\n      return years * paymentsPerAnnum;\n  }\n};\n\nexport const compoundInterestPerPeriod = (options: InterestOptions) => {\n  let { rate } = options;\n  const {\n    principal,\n    years,\n    paymentsPerAnnum = 1,\n    amountPerAnnum = 0,\n    accrualOfPaymentsPerAnnum = false,\n    currentPositionInYears,\n    debtRepayment = false\n  } = options;\n  // if rate is provided as a percentage, convert to decimal\n  if (rate >= 1) {\n    rate = rate / 100;\n  }\n\n  let investmentType: InvestmentType = \"lumpSum\";\n\n  if (!accrualOfPaymentsPerAnnum) {\n    if (amountPerAnnum > 0) {\n      investmentType = \"contribution\";\n    }\n    if (debtRepayment) {\n      investmentType = \"debtRepayment\";\n    }\n  }\n\n  const totalPayments = calcTotalPayments(years, paymentsPerAnnum, investmentType);\n  const ratePerPeriod = rate / paymentsPerAnnum;\n  const multiplierTotal = Math.pow(1 + rate, years);\n  const multiplierPerPeriod = 1 + ratePerPeriod;\n\n  // FIXME tidy up total investment calculation\n  let totalInvestment = accrualOfPaymentsPerAnnum ? principal + amountPerAnnum * years : principal + amountPerAnnum;\n\n  if (investmentType === \"contribution\") {\n    totalInvestment = principal + amountPerAnnum * years;\n  }\n\n  if (debtRepayment && !accrualOfPaymentsPerAnnum) {\n    totalInvestment = amountPerAnnum * years;\n  }\n\n  const interestPerAnnum: number[] = [];\n  const interestMatrix = new Map<string, number[]>();\n\n  let prevBalance = principal;\n  let currentBalance = principal;\n\n  for (let i = 0; i < years; i++) {\n    const monthlyBalance: number[] = [];\n    if (i > 0) {\n      // prevBalance = interestMatrix.get(`${i}`)?.[paymentsPerAnnum - 1] ?? principal;\n      prevBalance = interestMatrix.get(`${i}`)![paymentsPerAnnum - 1];\n    }\n    const interestThisYear = prevBalance * rate;\n    const interestParts: number[] = [];\n\n    if (!accrualOfPaymentsPerAnnum) interestPerAnnum.push(interestThisYear);\n\n    for (let p = 0; p < paymentsPerAnnum; p++) {\n      // TODO dont calculate first month and principal\n      if (accrualOfPaymentsPerAnnum) {\n        const newBalanceWithAccrual = prevBalance + amountPerAnnum / paymentsPerAnnum;\n        const interest = newBalanceWithAccrual * ratePerPeriod;\n        prevBalance = prevBalance + interest + amountPerAnnum / paymentsPerAnnum;\n        interestParts.push(interest);\n      } else {\n        const interest = interestThisYear / paymentsPerAnnum;\n        prevBalance = prevBalance + interest;\n      }\n      monthlyBalance.push(Number(prevBalance.toFixed(2)));\n    }\n\n    if (accrualOfPaymentsPerAnnum) {\n      const totalInterestForYear = interestParts.reduce((a, b) => a + b, 0);\n      interestPerAnnum.push(totalInterestForYear);\n    }\n\n    interestMatrix.set(`${i + 1}`, monthlyBalance);\n  }\n  if (currentPositionInYears) {\n    // TODO a better way to check undefined map values\n    // currentBalance = interestMatrix.get(`${currentPositionInYears}`)?.[paymentsPerAnnum - 1] ?? principal;\n    currentBalance = interestMatrix.get(`${currentPositionInYears}`)![paymentsPerAnnum - 1];\n  } else {\n    currentBalance = interestMatrix.get(`${years}`)![paymentsPerAnnum - 1];\n  }\n\n  const totalInterest = interestPerAnnum.reduce((a, b) => a + b, 0);\n\n  const endBalance = accrualOfPaymentsPerAnnum\n    ? interestMatrix.get(`${years}`)![paymentsPerAnnum - 1]\n    : principal * multiplierTotal;\n\n  return {\n    principal,\n    rate,\n    years,\n    currentPositionInYears,\n    paymentsPerAnnum,\n    totalPayments,\n    ratePerPeriod,\n    multiplierTotal,\n    multiplierPerPeriod,\n    totalInvestment, // TODO refactor to totalInvestment\n    interestMatrix,\n    interestPerAnnum,\n    currentBalance,\n    totalInterest,\n    endBalance,\n    accrualOfPaymentsPerAnnum,\n    investmentType\n  };\n};\n\nexport const calcMortgage = (options: MortgageOptions) => {\n  //\n};\n"]}